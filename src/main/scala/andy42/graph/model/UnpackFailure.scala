package andy42.graph.model

import org.msgpack.value.ValueType
import zio.*

import java.io.IOException

sealed trait UnpackFailure

/** A failure generated by MessagePack */
final case class DecodingFailure(ioe: IOException) extends UnpackFailure

/** Got an event type that doesn't correspond to a known Event type */
final case class UnexpectedEventDiscriminator(discriminator: Int) extends UnpackFailure

/** Got a org.msgpack.value.ValueType for a structure type (Map, Set) where a scalar type was expected */
final case class UnexpectedScalarValueType(valueType: ValueType) extends UnpackFailure

/** For contexts where MessagePack APIs can produce an error result of Throwable (always an IOException), we want to
  * transform that into an UnpackFailure.
  */
object UnpackSafely:

  def apply[A](f: => A): IO[UnpackFailure, A] =
    ZIO.attempt { f }.refineOrDie { case ioe: IOException => DecodingFailure(ioe) }
